        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      360:    8:int compare(const void* a, const void* b) {
      360:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      360:   11:  if (*(int*)a < *(int*)b)
       96:   12:    return -1;
      264:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
       10:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     1100:   59:    for (j = 0; j < 10; j++)
        -:   60:    {
     1000:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
        -:   65:    }
        -:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:  //set number of Curse cards
       10:   72:  if (numPlayers == 2)
        -:   73:  {
        8:   74:    state->supplyCount[curse] = 10;
        -:   75:  }
        2:   76:  else if (numPlayers == 3)
        -:   77:  {
    #####:   78:    state->supplyCount[curse] = 20;
        -:   79:  }
        -:   80:  else
        -:   81:  {
        2:   82:    state->supplyCount[curse] = 30;
        -:   83:  }
        -:   84:
        -:   85:  //set number of Victory cards
       10:   86:  if (numPlayers == 2)
        -:   87:  {
        8:   88:    state->supplyCount[estate] = 8;
        8:   89:    state->supplyCount[duchy] = 8;
        8:   90:    state->supplyCount[province] = 8;
        -:   91:  }
        -:   92:  else
        -:   93:  {
        2:   94:    state->supplyCount[estate] = 12;
        2:   95:    state->supplyCount[duchy] = 12;
        2:   96:    state->supplyCount[province] = 12;
        -:   97:  }
        -:   98:
        -:   99:  //set number of Treasure cards
       10:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  101:  state->supplyCount[silver] = 40;
       10:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
      210:  105:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  106:  {
     1650:  107:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  108:    {
     1550:  109:      if (kingdomCards[j] == i)
        -:  110:      {
        -:  111:        //check if card is a 'Victory' Kingdom card
      100:  112:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:        {
       20:  114:          if (numPlayers == 2){
        8:  115:            state->supplyCount[i] = 8;
        -:  116:          }
        2:  117:          else{ state->supplyCount[i] = 12; }
        -:  118:        }
        -:  119:        else
        -:  120:        {
       90:  121:          state->supplyCount[i] = 10;
        -:  122:        }
      100:  123:        break;
        -:  124:      }
        -:  125:      else    //card is not in the set choosen for the game
        -:  126:      {
     1450:  127:        state->supplyCount[i] = -1;
        -:  128:      }
        -:  129:    }
        -:  130:
        -:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       34:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:  {
       24:  139:    state->deckCount[i] = 0;
       96:  140:    for (j = 0; j < 3; j++)
        -:  141:    {
       72:  142:      state->deck[i][j] = estate;
       72:  143:      state->deckCount[i]++;
        -:  144:    }
      192:  145:    for (j = 3; j < 10; j++)
        -:  146:    {
      168:  147:      state->deck[i][j] = copper;
      168:  148:      state->deckCount[i]++;
        -:  149:    }
        -:  150:  }
        -:  151:
        -:  152:  //shuffle player decks
       34:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:  {
       24:  155:    if ( shuffle(i, state) < 0 )
        -:  156:    {
    #####:  157:      return -1;
        -:  158:    }
        -:  159:  }
        -:  160:
        -:  161:  //draw player hands
       34:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:  {
        -:  164:    //initialize hand size to zero
       24:  165:    state->handCount[i] = 0;
       24:  166:    state->discardCount[i] = 0;
        -:  167:    //draw 5 cards
        -:  168:    // for (j = 0; j < 5; j++)
        -:  169:    //	{
        -:  170:    //	  drawCard(i, state);
        -:  171:    //	}
        -:  172:  }
        -:  173:
        -:  174:  //set embargo tokens to 0 for all supply piles
      280:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:  {
      270:  177:    state->embargoTokens[i] = 0;
        -:  178:  }
        -:  179:
        -:  180:  //initialize first player's turn
       10:  181:  state->outpostPlayed = 0;
       10:  182:  state->phase = 0;
       10:  183:  state->numActions = 1;
       10:  184:  state->numBuys = 1;
       10:  185:  state->playedCardCount = 0;
       10:  186:  state->whoseTurn = 0;
       10:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
       60:  191:  for (it = 0; it < 5; it++){
       50:  192:    drawCard(state->whoseTurn, state);
        -:  193:  }
        -:  194:
       10:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
       10:  197:  return 0;
        -:  198:}
        -:  199:
       24:  200:int shuffle(int player, struct gameState *state) {
        -:  201:
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       24:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       24:  208:  if (state->deckCount[player] < 1)
    #####:  209:    return -1;
       24:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      288:  213:  while (state->deckCount[player] > 0) {
      240:  214:    card = floor(Random() * state->deckCount[player]);
      240:  215:    newDeck[newDeckPos] = state->deck[player][card];
      240:  216:    newDeckPos++;
      904:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      664:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
      240:  220:    state->deckCount[player]--;
        -:  221:  }
      264:  222:  for (i = 0; i < newDeckPos; i++) {
      240:  223:    state->deck[player][i] = newDeck[i];
      240:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
       24:  227:  return 0;
        -:  228:}
        -:  229:
        7:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  231:{
        -:  232:  int card;
        7:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
        7:  236:  if (state->phase != 0)
        -:  237:  {
    #####:  238:    return -1;
        -:  239:  }
        -:  240:
        -:  241:  //check if player has enough actions
        7:  242:  if ( state->numActions < 1 )
        -:  243:  {
    #####:  244:    return -1;
        -:  245:  }
        -:  246:
        -:  247:  //get card played
        7:  248:  card = handCard(handPos, state);
        -:  249:
        -:  250:  //check if selected card is an action
        7:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:  {
    #####:  253:    return -1;
        -:  254:  }
        -:  255:
        -:  256:  //play card
        7:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:  {
    #####:  259:    return -1;
        -:  260:  }
        -:  261:
        -:  262:  //reduce number of actions
        7:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
        7:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:
        7:  268:  return 0;
        -:  269:}
        -:  270:
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:
    #####:  307:  return 0;
        -:  308:}
        -:  309:
     1000:  310:int numHandCards(struct gameState *state) {
     1000:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
        7:  314:int handCard(int handPos, struct gameState *state) {
        7:  315:  int currentPlayer = whoseTurn(state);
        7:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
    #####:  319:int supplyCount(int card, struct gameState *state) {
    #####:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:  {
    #####:  329:    if (state->deck[player][i] == card) count++;
        -:  330:  }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:  {
    #####:  334:    if (state->hand[player][i] == card) count++;
        -:  335:  }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:  {
    #####:  339:    if (state->discard[player][i] == card) count++;
        -:  340:  }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
     1014:  345:int whoseTurn(struct gameState *state) {
     1014:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
    #####:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
      502:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:
        -:  393:  //if stack of Province cards is empty, the game ends
      502:  394:  if (state->supplyCount[province] == 0)
        -:  395:  {
        2:  396:    return 1;
        -:  397:  }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
      500:  400:  j = 0;
    13000:  401:  for (i = 0; i < 25; i++)
        -:  402:  {
    12500:  403:    if (state->supplyCount[i] == 0)
        -:  404:    {
    #####:  405:      j++;
        -:  406:    }
        -:  407:  }
      500:  408:  if ( j >= 3)
        -:  409:  {
    #####:  410:    return 1;
        -:  411:  }
        -:  412:
      500:  413:  return 0;
        -:  414:}
        -:  415:
    #####:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:  {
    #####:  423:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  429:  }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:  {
    #####:  434:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  440:  }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:  {
    #####:  445:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:  }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:  {
        -:  465:    //set unused player scores to -9999
    #####:  466:    if (i >= state->numPlayers)
        -:  467:    {
    #####:  468:      players[i] = -9999;
        -:  469:    }
        -:  470:    else
        -:  471:    {
    #####:  472:      players[i] = scoreFor (i, state);
        -:  473:    }
        -:  474:  }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:  {
    #####:  480:    if (players[i] > players[j])
        -:  481:    {
    #####:  482:      j = i;
        -:  483:    }
        -:  484:  }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:  {
    #####:  491:    if ( players[i] == highScore && i > currentPlayer )
        -:  492:    {
    #####:  493:      players[i]++;
        -:  494:    }
        -:  495:  }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:  {
    #####:  501:    if ( players[i] > players[j] )
        -:  502:    {
    #####:  503:      j = i;
        -:  504:    }
        -:  505:  }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:  {
    #####:  511:    if ( players[i] == highScore )
        -:  512:    {
    #####:  513:      players[i] = 1;
        -:  514:    }
        -:  515:    else
        -:  516:    {
    #####:  517:      players[i] = 0;
        -:  518:    }
        -:  519:  }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
       75:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
       75:  527:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  528:
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
    #####:  532:    for (i = 0; i < state->discardCount[player];i++){
    #####:  533:      state->deck[player][i] = state->discard[player][i];
    #####:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
    #####:  537:    state->deckCount[player] = state->discardCount[player];
    #####:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
    #####:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:
    #####:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
    #####:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:
    #####:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
    #####:  558:    if (deckCounter == 0)
    #####:  559:      return -1;
        -:  560:
    #####:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  562:    state->deckCount[player]--;
    #####:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
       75:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       75:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       75:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       75:  575:    state->deckCount[player]--;
       75:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       75:  579:  return 0;
        -:  580:}
        -:  581:
       30:  582:int getCost(int cardNumber)
        -:  583:{
       30:  584:  switch( cardNumber )
        -:  585:  {
        -:  586:    case curse:
        2:  587:      return 0;
        -:  588:    case estate:
        2:  589:      return 2;
        -:  590:    case duchy:
        1:  591:      return 5;
        -:  592:    case province:
        1:  593:      return 8;
        -:  594:    case copper:
        1:  595:      return 0;
        -:  596:    case silver:
        1:  597:      return 3;
        -:  598:    case gold:
        1:  599:      return 6;
        -:  600:    case adventurer:
        1:  601:      return 6;
        -:  602:    case council_room:
        1:  603:      return 5;
        -:  604:    case feast:
        1:  605:      return 4;
        -:  606:    case gardens:
        1:  607:      return 4;
        -:  608:    case mine:
        1:  609:      return 5;
        -:  610:    case remodel:
        1:  611:      return 4;
        -:  612:    case smithy:
        1:  613:      return 4;
        -:  614:    case village:
        1:  615:      return 3;
        -:  616:    case baron:
        1:  617:      return 4;
        -:  618:    case great_hall:
        1:  619:      return 3;
        -:  620:    case minion:
        1:  621:      return 5;
        -:  622:    case steward:
        1:  623:      return 3;
        -:  624:    case tribute:
        1:  625:      return 5;
        -:  626:    case ambassador:
        1:  627:      return 3;
        -:  628:    case cutpurse:
        1:  629:      return 4;
        -:  630:    case embargo:
        1:  631:      return 2;
        -:  632:    case outpost:
        1:  633:      return 5;
        -:  634:    case salvager:
        1:  635:      return 4;
        -:  636:    case sea_hag:
        1:  637:      return 4;
        -:  638:    case treasure_map:
        1:  639:      return 4;
        -:  640:  }
        -:  641:
        1:  642:  return -1;
        -:  643:}
        -:  644:
        1:  645:void playAdventurerCard (int currentPlayer, int handPos, struct gameState* state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        4:  646:  while(drawntreasure<2){
        2:  647:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  648:      shuffle(currentPlayer, state);
        -:  649:    }
        2:  650:    drawCard(currentPlayer, state);
        2:  651:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  652:// Bug-removes gold and silver comparison  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  653:    if (cardDrawn == copper)
        2:  654:      drawntreasure++;
        -:  655:    else{
    #####:  656:      temphand[z]=cardDrawn;
    #####:  657:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  658:      z++;
        -:  659:    }
        -:  660:  }
        2:  661:  while(z-1>=0){
    #####:  662:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  663:    z=z-1;
        -:  664:  }
        1:  665:}
        -:  666:
        -:  667:
        3:  668:void playSmithyCard(int currentPlayer, int handPos, struct gameState* state) {
        -:  669:  int i;
        -:  670:  //+3 Cards Bug - i < 3
       15:  671:  for (i = 0; i < 4; i++)
        -:  672:  {
       12:  673:    drawCard(currentPlayer, state);
        -:  674:  }
        -:  675:
        -:  676:  //discard card from hand
        3:  677:  discardCard(handPos, currentPlayer, state, 0);
        3:  678:}
        -:  679:
        2:  680:void playVillageCard(int currentPlayer, int handPos, struct gameState* state) {
        -:  681:  //+1 Card Bug- Draws card Twice
        2:  682:  drawCard(currentPlayer, state);
        2:  683:  drawCard(currentPlayer, state);
        -:  684:
        -:  685:  //+2 Actions
        2:  686:  state->numActions = state->numActions + 2;
        -:  687:
        -:  688:  //discard played card from hand
        2:  689:  discardCard(handPos, currentPlayer, state, 0);
        -:  690:
        2:  691:}
        -:  692:
    #####:  693:void playGreatHallCard(int currentPlayer, int handPos, struct gameState* state) {
        -:  694:  //+1 Card
    #####:  695:  drawCard(currentPlayer, state);
        -:  696:
    #####:  697:  state->numActions++;
        -:  698:
        -:  699:  //discard card from hand
    #####:  700:  discardCard(handPos, currentPlayer, state, 0);
    #####:  701:}
        -:  702:
    #####:  703:void playStewardCard(int currentPlayer, int handPos, struct gameState* state, int choice1, int choice2, int choice3) {
    #####:  704:  if (choice1 == 1)
        -:  705:  {
        -:  706:    //+2 cards
    #####:  707:    drawCard(currentPlayer, state);
    #####:  708:    drawCard(currentPlayer, state);
        -:  709:  }
    #####:  710:  else if (choice1 == 2)
        -:  711:  {
        -:  712:    //+2 coins Bug - Should be 2
    #####:  713:    state->coins = state->coins + 3;
        -:  714:  }
        -:  715:  else
        -:  716:  {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
    #####:  719:    discardCard(choice3, currentPlayer, state, 1);
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
    #####:  724:}
        -:  725:
        7:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
        7:  733:  int currentPlayer = whoseTurn(state);
        7:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
        7:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
        7:  738:  int drawntreasure=0;
        -:  739:  int cardDrawn;
        7:  740:  int z = 0;// this is the counter for the temp hand
        7:  741:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  742:    nextPlayer = 0;
        -:  743:  }
        -:  744:
        -:  745:  //uses switch to select card and perform actions
        7:  746:  switch( card )
        -:  747:  {
        -:  748:    case adventurer:
        1:  749:      playAdventurerCard(currentPlayer, handPos, state, drawntreasure, temphand, cardDrawn, z);
        1:  750:      return 0;
        -:  751:
        -:  752:    case council_room:
        -:  753:      //+4 Cards
        5:  754:      for (i = 0; i < 4; i++)
        -:  755:      {
        4:  756:        drawCard(currentPlayer, state);
        -:  757:      }
        -:  758:
        -:  759:          //+1 Buy
        1:  760:          state->numBuys++;
        -:  761:
        -:  762:          //Each other player draws a card
        5:  763:          for (i = 0; i < state->numPlayers; i++)
        -:  764:          {
        4:  765:            if ( i != currentPlayer )
        -:  766:            {
        3:  767:              drawCard(i, state);
        -:  768:            }
        -:  769:          }
        -:  770:
        -:  771:          //put played card in played card pile
        1:  772:          discardCard(handPos, currentPlayer, state, 0);
        -:  773:
        1:  774:          return 0;
        -:  775:
        -:  776:    case feast:
        -:  777:      //gain card with cost up to 5
        -:  778:      //Backup hand
    #####:  779:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  780:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  781:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  782:      }
        -:  783:          //Backup hand
        -:  784:
        -:  785:          //Update Coins for Buy
    #####:  786:          updateCoins(currentPlayer, state, 5);
    #####:  787:          x = 1;//Condition to loop on
    #####:  788:          while( x == 1) {//Buy one card
    #####:  789:            if (supplyCount(choice1, state) <= 0){
        -:  790:              if (DEBUG)
        -:  791:                printf("None of that card left, sorry!\n");
        -:  792:
        -:  793:              if (DEBUG){
        -:  794:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  795:              }
        -:  796:            }
    #####:  797:            else if (state->coins < getCost(choice1)){
    #####:  798:              printf("That card is too expensive!\n");
        -:  799:
        -:  800:              if (DEBUG){
        -:  801:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  802:              }
        -:  803:            }
        -:  804:            else{
        -:  805:
        -:  806:              if (DEBUG){
        -:  807:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:              }
        -:  809:
    #####:  810:              gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  811:              x = 0;//No more buying cards
        -:  812:
        -:  813:              if (DEBUG){
        -:  814:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  815:              }
        -:  816:
        -:  817:            }
        -:  818:          }
        -:  819:
        -:  820:          //Reset Hand
    #####:  821:          for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  822:            state->hand[currentPlayer][i] = temphand[i];
    #####:  823:            temphand[i] = -1;
        -:  824:          }
        -:  825:          //Reset Hand
        -:  826:
    #####:  827:          return 0;
        -:  828:
        -:  829:    case gardens:
    #####:  830:      return -1;
        -:  831:
        -:  832:    case mine:
    #####:  833:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  834:
    #####:  835:          if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  836:          {
    #####:  837:            return -1;
        -:  838:          }
        -:  839:
    #####:  840:          if (choice2 > treasure_map || choice2 < curse)
        -:  841:          {
    #####:  842:            return -1;
        -:  843:          }
        -:  844:
    #####:  845:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  846:          {
    #####:  847:            return -1;
        -:  848:          }
        -:  849:
    #####:  850:          gainCard(choice2, state, 2, currentPlayer);
        -:  851:
        -:  852:          //discard card from hand
    #####:  853:          discardCard(handPos, currentPlayer, state, 0);
        -:  854:
        -:  855:          //discard trashed card
    #####:  856:          for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  857:          {
    #####:  858:            if (state->hand[currentPlayer][i] == j)
        -:  859:            {
    #####:  860:              discardCard(i, currentPlayer, state, 0);
    #####:  861:              break;
        -:  862:            }
        -:  863:          }
        -:  864:
    #####:  865:          return 0;
        -:  866:
        -:  867:    case remodel:
    #####:  868:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:          if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  871:          {
    #####:  872:            return -1;
        -:  873:          }
        -:  874:
    #####:  875:          gainCard(choice2, state, 0, currentPlayer);
        -:  876:
        -:  877:          //discard card from hand
    #####:  878:          discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:          //discard trashed card
    #####:  881:          for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  882:          {
    #####:  883:            if (state->hand[currentPlayer][i] == j)
        -:  884:            {
    #####:  885:              discardCard(i, currentPlayer, state, 0);
    #####:  886:              break;
        -:  887:            }
        -:  888:          }
    #####:  889:          return 0;
        -:  890:
        -:  891:    case smithy:
        3:  892:      playSmithyCard(currentPlayer, handPos, state);
        3:  893:      return 0;
        -:  894:
        -:  895:    case village:
        2:  896:      playVillageCard(currentPlayer, handPos, state);
        2:  897:      return 0;
        -:  898:
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:          if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  902:            int p = 0;//Iterator for hand!
    #####:  903:            int card_not_discarded = 1;//Flag for discard set!
    #####:  904:            while(card_not_discarded){
    #####:  905:              if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  906:                state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:                state->discardCount[currentPlayer]++;
    #####:  909:                for (;p < state->handCount[currentPlayer]; p++){
    #####:  910:                  state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:                }
    #####:  912:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:                state->handCount[currentPlayer]--;
    #####:  914:                card_not_discarded = 0;//Exit the loop
        -:  915:              }
    #####:  916:              else if (p > state->handCount[currentPlayer]){
        -:  917:                if(DEBUG) {
        -:  918:                  printf("No estate cards in your hand, invalid choice\n");
        -:  919:                  printf("Must gain an estate if there are any\n");
        -:  920:                }
    #####:  921:                if (supplyCount(estate, state) > 0){
    #####:  922:                  gainCard(estate, state, 0, currentPlayer);
    #####:  923:                  state->supplyCount[estate]--;//Decrement estates
    #####:  924:                  if (supplyCount(estate, state) == 0){
    #####:  925:                    isGameOver(state);
        -:  926:                  }
        -:  927:                }
    #####:  928:                card_not_discarded = 0;//Exit the loop
        -:  929:              }
        -:  930:
        -:  931:              else{
    #####:  932:                p++;//Next card
        -:  933:              }
        -:  934:            }
        -:  935:          }
        -:  936:
        -:  937:          else{
    #####:  938:            if (supplyCount(estate, state) > 0){
    #####:  939:              gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:              state->supplyCount[estate]--;//Decrement Estates
    #####:  941:              if (supplyCount(estate, state) == 0){
    #####:  942:                isGameOver(state);
        -:  943:              }
        -:  944:            }
        -:  945:          }
        -:  946:
        -:  947:
    #####:  948:          return 0;
        -:  949:
        -:  950:    case great_hall:
    #####:  951:      playGreatHallCard(currentPlayer, handPos, state);
    #####:  952:      return 0;
        -:  953:
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:
        -:  958:          //discard card from hand
    #####:  959:          discardCard(handPos, currentPlayer, state, 0);
        -:  960:
    #####:  961:          if (choice1)		//+2 coins
        -:  962:          {
    #####:  963:            state->coins = state->coins + 2;
        -:  964:          }
        -:  965:
    #####:  966:          else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:          {
        -:  968:            //discard hand
    #####:  969:            while(numHandCards(state) > 0)
        -:  970:            {
    #####:  971:              discardCard(handPos, currentPlayer, state, 0);
        -:  972:            }
        -:  973:
        -:  974:            //draw 4
    #####:  975:            for (i = 0; i < 4; i++)
        -:  976:            {
    #####:  977:              drawCard(currentPlayer, state);
        -:  978:            }
        -:  979:
        -:  980:            //other players discard hand and redraw if hand size > 4
    #####:  981:            for (i = 0; i < state->numPlayers; i++)
        -:  982:            {
    #####:  983:              if (i != currentPlayer)
        -:  984:              {
    #####:  985:                if ( state->handCount[i] > 4 )
        -:  986:                {
        -:  987:                  //discard hand
    #####:  988:                  while( state->handCount[i] > 0 )
        -:  989:                  {
    #####:  990:                    discardCard(handPos, i, state, 0);
        -:  991:                  }
        -:  992:
        -:  993:                  //draw 4
    #####:  994:                  for (j = 0; j < 4; j++)
        -:  995:                  {
    #####:  996:                    drawCard(i, state);
        -:  997:                  }
        -:  998:                }
        -:  999:              }
        -: 1000:            }
        -: 1001:
        -: 1002:          }
    #####: 1003:          return 0;
        -: 1004:
        -: 1005:    case steward:
    #####: 1006:      playStewardCard(currentPlayer, handPos, state, choice1, choice2, choice3);
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1011:            if (state->deckCount[nextPlayer] > 0){
    #####: 1012:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:          state->deckCount[nextPlayer]--;
        -: 1014:        }
    #####: 1015:        else if (state->discardCount[nextPlayer] > 0){
    #####: 1016:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:          state->discardCount[nextPlayer]--;
        -: 1018:        }
        -: 1019:        else{
        -: 1020:          //No Card to Reveal
        -: 1021:          if (DEBUG){
        -: 1022:            printf("No cards to reveal\n");
        -: 1023:          }
        -: 1024:        }
        -: 1025:      }
        -: 1026:
        -: 1027:      else{
    #####: 1028:        if (state->deckCount[nextPlayer] == 0){
    #####: 1029:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1030:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:            state->deckCount[nextPlayer]++;
    #####: 1032:            state->discard[nextPlayer][i] = -1;
    #####: 1033:            state->discardCount[nextPlayer]--;
        -: 1034:          }
        -: 1035:
    #####: 1036:          shuffle(nextPlayer,state);//Shuffle the deck
        -: 1037:        }
    #####: 1038:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:        state->deckCount[nextPlayer]--;
    #####: 1041:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:        state->deckCount[nextPlayer]--;
        -: 1044:      }
        -: 1045:
    #####: 1046:          if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1047:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:            state->playedCardCount++;
    #####: 1049:            tributeRevealedCards[1] = -1;
        -: 1050:          }
        -: 1051:
    #####: 1052:          for (i = 0; i <= 2; i ++){
    #####: 1053:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1054:              state->coins += 2;
        -: 1055:            }
        -: 1056:
    #####: 1057:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1058:              drawCard(currentPlayer, state);
    #####: 1059:              drawCard(currentPlayer, state);
        -: 1060:            }
        -: 1061:            else{//Action Card
    #####: 1062:              state->numActions = state->numActions + 2;
        -: 1063:            }
        -: 1064:          }
        -: 1065:
    #####: 1066:          return 0;
        -: 1067:
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:          if (choice2 > 2 || choice2 < 0)
        -: 1072:          {
    #####: 1073:            return -1;
        -: 1074:          }
        -: 1075:
    #####: 1076:          if (choice1 == handPos)
        -: 1077:          {
    #####: 1078:            return -1;
        -: 1079:          }
        -: 1080:
    #####: 1081:          for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1082:          {
    #####: 1083:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1084:            {
    #####: 1085:              j++;
        -: 1086:            }
        -: 1087:          }
    #####: 1088:          if (j < choice2)
        -: 1089:          {
    #####: 1090:            return -1;
        -: 1091:          }
        -: 1092:
        -: 1093:          if (DEBUG)
        -: 1094:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:          //increase supply count for choosen card by amount being discarded
    #####: 1097:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:
        -: 1099:          //each other player gains a copy of revealed card
    #####: 1100:          for (i = 0; i < state->numPlayers; i++)
        -: 1101:          {
    #####: 1102:            if (i != currentPlayer)
        -: 1103:            {
    #####: 1104:              gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1105:            }
        -: 1106:          }
        -: 1107:
        -: 1108:          //discard played card from hand
    #####: 1109:          discardCard(handPos, currentPlayer, state, 0);
        -: 1110:
        -: 1111:          //trash copies of cards returned to supply
    #####: 1112:          for (j = 0; j < choice2; j++)
        -: 1113:          {
    #####: 1114:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1115:            {
    #####: 1116:              if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1117:              {
    #####: 1118:                discardCard(i, currentPlayer, state, 1);
    #####: 1119:                break;
        -: 1120:              }
        -: 1121:            }
        -: 1122:          }
        -: 1123:
    #####: 1124:          return 0;
        -: 1125:
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
    #####: 1129:          for (i = 0; i < state->numPlayers; i++)
        -: 1130:          {
    #####: 1131:            if (i != currentPlayer)
        -: 1132:            {
    #####: 1133:              for (j = 0; j < state->handCount[i]; j++)
        -: 1134:              {
    #####: 1135:                if (state->hand[i][j] == copper)
        -: 1136:                {
    #####: 1137:                  discardCard(j, i, state, 0);
    #####: 1138:                  break;
        -: 1139:                }
    #####: 1140:                if (j == state->handCount[i])
        -: 1141:                {
    #####: 1142:                  for (k = 0; k < state->handCount[i]; k++)
        -: 1143:                  {
        -: 1144:                    if (DEBUG)
        -: 1145:                      printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:                  }
    #####: 1147:                  break;
        -: 1148:                }
        -: 1149:              }
        -: 1150:
        -: 1151:            }
        -: 1152:
        -: 1153:          }
        -: 1154:
        -: 1155:          //discard played card from hand
    #####: 1156:          discardCard(handPos, currentPlayer, state, 0);
        -: 1157:
    #####: 1158:          return 0;
        -: 1159:
        -: 1160:
        -: 1161:    case embargo:
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:
        -: 1165:          //see if selected pile is in play
    #####: 1166:          if ( state->supplyCount[choice1] == -1 )
        -: 1167:          {
    #####: 1168:            return -1;
        -: 1169:          }
        -: 1170:
        -: 1171:          //add embargo token to selected supply pile
    #####: 1172:          state->embargoTokens[choice1]++;
        -: 1173:
        -: 1174:          //trash card
    #####: 1175:          discardCard(handPos, currentPlayer, state, 1);
    #####: 1176:          return 0;
        -: 1177:
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:
        -: 1182:          //discard card
    #####: 1183:          discardCard(handPos, currentPlayer, state, 0);
    #####: 1184:          return 0;
        -: 1185:
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:
    #####: 1190:          if (choice1)
        -: 1191:          {
        -: 1192:            //gain coins equal to trashed card
    #####: 1193:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1194:            //trash card
    #####: 1195:            discardCard(choice1, currentPlayer, state, 1);
        -: 1196:          }
        -: 1197:
        -: 1198:          //discard card
    #####: 1199:          discardCard(handPos, currentPlayer, state, 0);
    #####: 1200:          return 0;
        -: 1201:
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
    #####: 1204:        if (i != currentPlayer){
    #####: 1205:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:          state->discardCount[i]++;
    #####: 1207:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:        }
        -: 1209:      }
    #####: 1210:          return 0;
        -: 1211:
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:          for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1216:          {
    #####: 1217:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1218:            {
    #####: 1219:              index = i;
    #####: 1220:              break;
        -: 1221:            }
        -: 1222:          }
    #####: 1223:          if (index > -1)
        -: 1224:          {
        -: 1225:            //trash both treasure cards
    #####: 1226:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1227:            discardCard(index, currentPlayer, state, 1);
        -: 1228:
        -: 1229:            //gain 4 Gold cards
    #####: 1230:            for (i = 0; i < 4; i++)
        -: 1231:            {
    #####: 1232:              gainCard(gold, state, 1, currentPlayer);
        -: 1233:            }
        -: 1234:
        -: 1235:            //return success
    #####: 1236:            return 1;
        -: 1237:          }
        -: 1238:
        -: 1239:          //no second treasure_map found in hand
    #####: 1240:          return -1;
        -: 1241:  }
        -: 1242:
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
        6: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:
        -: 1249:  //if card is not trashed, added to Played pile
        6: 1250:  if (trashFlag < 1)
        -: 1251:  {
        -: 1252:    //add card to played pile
        6: 1253:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        6: 1254:    state->playedCardCount++;
        -: 1255:  }
        -: 1256:
        -: 1257:  //set played card to -1
        6: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:
        -: 1260:  //remove card from player's hand
        6: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1262:  {
        -: 1263:    //reduce number of cards in hand
    #####: 1264:    state->handCount[currentPlayer]--;
        -: 1265:  }
        6: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1267:  {
        -: 1268:    //reduce number of cards in hand
    #####: 1269:    state->handCount[currentPlayer]--;
        -: 1270:  }
        -: 1271:  else
        -: 1272:  {
        -: 1273:    //replace discarded card with last card in hand
        6: 1274:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:    //set last card to -1
        6: 1276:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:    //reduce number of cards in hand
        6: 1278:    state->handCount[currentPlayer]--;
        -: 1279:  }
        -: 1280:
        6: 1281:  return 0;
        -: 1282:}
        -: 1283:
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1290:  {
    #####: 1291:    return -1;
        -: 1292:  }
        -: 1293:
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
        -: 1300:  {
    #####: 1301:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:    state->deckCount[player]++;
        -: 1303:  }
    #####: 1304:  else if (toFlag == 2)
        -: 1305:  {
    #####: 1306:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:    state->handCount[player]++;
        -: 1308:  }
        -: 1309:  else
        -: 1310:  {
    #####: 1311:    state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:    state->discardCount[player]++;
        -: 1313:  }
        -: 1314:
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
       21: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:
        -: 1325:  //reset coin count
       21: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
      177: 1329:  for (i = 0; i < state->handCount[player]; i++)
        -: 1330:  {
      156: 1331:    if (state->hand[player][i] == copper)
        -: 1332:    {
       85: 1333:      state->coins += 1;
        -: 1334:    }
       71: 1335:    else if (state->hand[player][i] == silver)
        -: 1336:    {
        5: 1337:      state->coins += 2;
        -: 1338:    }
       66: 1339:    else if (state->hand[player][i] == gold)
        -: 1340:    {
        5: 1341:      state->coins += 3;
        -: 1342:    }
        -: 1343:  }
        -: 1344:
        -: 1345:  //add bonus
       21: 1346:  state->coins += bonus;
        -: 1347:
       21: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
